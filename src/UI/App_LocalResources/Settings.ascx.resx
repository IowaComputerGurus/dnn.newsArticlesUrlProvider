<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArticleUrlSource.Text" xml:space="preserve">
    <value>Source of Article Url</value>
  </data>
  <data name="ArticleUrlStyle.Text" xml:space="preserve">
    <value>Style of Article Url</value>
  </data>
  <data name="AuthorUrlStyle.Text" xml:space="preserve">
    <value>Style of Author Url</value>
  </data>
  <data name="BlogStyle.Text" xml:space="preserve">
    <value>Blog Style (/2001/12/01/Blog-Article-Title-Text)</value>
  </data>
  <data name="CategoryUrlStyle.Text" xml:space="preserve">
    <value>Style of Category Url</value>
  </data>
  <data name="CatHierarchy.Text" xml:space="preserve">
    <value>Category Hierarchy (/cat1/cat2)</value>
  </data>
  <data name="CatName.Text" xml:space="preserve">
    <value>Category Name (/cat1)</value>
  </data>
  <data name="DisplayName.Text" xml:space="preserve">
    <value>Author Display Name (/Firstname-Lastname)</value>
  </data>
  <data name="Header.Text" xml:space="preserve">
    <value>NewsArticles Provider Settings</value>
  </data>
  <data name="MetaTitle.Text" xml:space="preserve">
    <value>Article Meta Title</value>
  </data>
  <data name="NoDnnPagePath.Text" xml:space="preserve">
    <value>Hide DotNetNuke Page name from Url</value>
  </data>
  <data name="NoDnnPagePathTab.Help" xml:space="preserve">
    <value>The selected tab will not have the tab path output in the Urls.  Selecting a page called 'MyPath' will mean the Urls will display without having /MyPage/ in front of the result.</value>
  </data>
  <data name="NoDnnPagePathTab.Text" xml:space="preserve">
    <value>Select page to have pagename hidden in output Urls (one per portal)</value>
  </data>
  <data name="NoTabSelected.Text" xml:space="preserve">
    <value>[Select Tab]</value>
  </data>
  <data name="PageTitle.Text" xml:space="preserve">
    <value>Unique Page Title</value>
  </data>
  <data name="PageUrlStyle.Text" xml:space="preserve">
    <value>Style of Page Url</value>
  </data>
  <data name="ShortUrl.Text" xml:space="preserve">
    <value>Article Short Url</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Article Title</value>
  </data>
  <data name="TitleAndNum.Text" xml:space="preserve">
    <value>Page Title and Number</value>
  </data>
  <data name="TitleStyle.Text" xml:space="preserve">
    <value>Title Style (Article-Title-Text)</value>
  </data>
  <data name="UrlPath.Help" xml:space="preserve">
    <value>Enter a value if you wish to prefix the Url paths with a value </value>
  </data>
  <data name="UrlPath.Text" xml:space="preserve">
    <value>Url Path</value>
  </data>
  <data name="UserName.Text" xml:space="preserve">
    <value>Author Username (/username)</value>
  </data>
  <data name="RedirectOldUrls.Text" xml:space="preserve">
    <value>Redirect 'old' style Urls to newer Urls?</value>
  </data>
  <data name="StartingArticleId.Help" xml:space="preserve">
    <value>If you wish to start the newer friendly Urls from a specific Article onwards, enter the article Id of the last article posted.  This can be ascertained from the Url of the last created article (ie articleId/xx or ID/xx).   By doing this, the provider will not attempt to redirect existing Urls, and will create new Urls only for articles from this point onwards.</value>
  </data>
  <data name="StartingArticleId.Text" xml:space="preserve">
    <value>First Article Id that should use new Url Formats:</value>
  </data>
  <data name="TabSettings.Help" xml:space="preserve">
    <value>You can specify the different Url styles for each separate page the News Article Friendly Url Provider has been associated with.   This allows you to have per-page settings for all article module instances in this portal.</value>
  </data>
  <data name="TabSettings.Text" xml:space="preserve">
    <value>Page-specific Url Settings:</value>
  </data>
</root>